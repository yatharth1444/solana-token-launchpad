/// <reference types="node" />
/// <reference types="node" />
import UDP from 'dgram';
import { AbstractApi, AbstractApiConstructorParams, DEVICE_TYPE } from './abstract';
export declare class UdpApi extends AbstractApi {
    chunkSize: number;
    protected interface: UDP.Socket;
    protected communicating: boolean;
    private enumerationTimeout;
    private enumerateAbortController;
    constructor({ logger }: AbstractApiConstructorParams);
    listen(): void;
    write(path: string, buffer: Buffer, signal?: AbortSignal): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | import("../types").Success<undefined> | {
        success: false;
        error: "A transfer error has occurred.";
    }>;
    read(_path: string, signal?: AbortSignal): Promise<{
        success: false;
        error: "Unable to open device";
    } | {
        success: false;
        error: "device not found";
    } | {
        success: false;
        error: "device disconnected during action";
    } | {
        success: false;
        error: "unexpected error";
    } | {
        success: false;
        error: "Aborted by signal";
    } | {
        success: false;
        error: "Aborted by timeout";
    } | {
        success: false;
        error: "A transfer error has occurred.";
    } | import("../types").Success<Buffer>>;
    private ping;
    enumerate(signal?: AbortSignal): Promise<import("../types").Success<{
        path: string;
        type: DEVICE_TYPE;
    }[]> | {
        success: false;
        error: "Aborted by signal";
        message: string | undefined;
    }>;
    openDevice(_path: string, _first: boolean, _signal?: AbortSignal): Promise<import("../types").Success<undefined>>;
    closeDevice(_path: string): Promise<import("../types").Success<undefined>>;
    dispose(): void;
}
//# sourceMappingURL=udp.d.ts.map