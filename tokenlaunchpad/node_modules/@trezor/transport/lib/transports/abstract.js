"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractTransport = exports.isTransportInstance = void 0;
const tslib_1 = require("tslib");
const protobuf = tslib_1.__importStar(require("protobufjs/light"));
const utils_1 = require("@trezor/utils");
const utils_2 = require("@trezor/utils");
const result_1 = require("../utils/result");
const ERRORS = tslib_1.__importStar(require("../errors"));
const constants_1 = require("../constants");
const isTransportInstance = (transport) => {
    const requiredMethods = [
        'init',
        'enumerate',
        'listen',
        'acquire',
        'release',
        'send',
        'receive',
        'call',
    ];
    if (transport && typeof transport === 'object') {
        return !requiredMethods.some(m => typeof transport[m] !== 'function');
    }
    return false;
};
exports.isTransportInstance = isTransportInstance;
class AbstractTransport extends utils_2.TypedEmitter {
    constructor(params) {
        const { messages, signal, logger } = params || {};
        super();
        this.isOutdated = false;
        this.version = '';
        this.stopped = true;
        this.listening = false;
        this.acquiredUnconfirmed = {};
        this.listenPromise = {};
        this.releaseUnconfirmed = {};
        this.unknownError = (err, expectedErrors) => {
            var _a;
            (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(this.name, 'unexpected error: ', err);
            return (0, result_1.unknownError)(typeof err !== 'string' ? err : new Error(err), expectedErrors);
        };
        this.createLocalAbortController = () => {
            const localAbortController = new AbortController();
            const abort = () => localAbortController.abort();
            localAbortController.signal.addEventListener('abort', () => {
                this.abortController.signal.removeEventListener('abort', abort);
            });
            this.abortController.signal.addEventListener('abort', abort);
            return { signal: localAbortController.signal, abort };
        };
        this.scheduleAction = (action, params, errors) => {
            const { signal, abort } = this.createLocalAbortController();
            return {
                promise: (0, utils_1.scheduleAction)(action, Object.assign({ signal, timeout: constants_1.ACTION_TIMEOUT }, params))
                    .catch(err => {
                    const expectedErrors = [ERRORS.ABORTED_BY_TIMEOUT, ERRORS.ABORTED_BY_SIGNAL];
                    if (errors) {
                        expectedErrors.push(...errors);
                    }
                    return (0, result_1.unknownError)(err, expectedErrors);
                })
                    .finally(() => {
                    this.abortController.signal.removeEventListener('abort', abort);
                }),
                abort,
            };
        };
        this.descriptors = [];
        this.messages = protobuf.Root.fromJSON(messages || {});
        this.abortController = new AbortController();
        const abort = () => this.abortController.abort();
        this.abortController.signal.addEventListener('abort', () => signal.removeEventListener('abort', abort));
        signal.addEventListener('abort', abort);
        this.logger = logger;
    }
    getDiff(nextDescriptors) {
        const connected = nextDescriptors.filter(nextDescriptor => !this.descriptors.find(descriptor => `${descriptor.path}${descriptor.product}` ===
            `${nextDescriptor.path}${nextDescriptor.product}`));
        const disconnected = this.descriptors.filter(d => nextDescriptors.find(x => `${x.path}${x.product}` === `${d.path}${d.product}`) ===
            undefined);
        const changedSessions = nextDescriptors.filter(d => {
            const currentDescriptor = this.descriptors.find(x => x.path === d.path);
            if (currentDescriptor) {
                return currentDescriptor.session !== d.session;
            }
            return false;
        });
        const acquired = changedSessions.filter(d => typeof d.session === 'string');
        const acquiredByMyself = acquired.filter(d => d.session === this.acquiredUnconfirmed[d.path]);
        const acquiredElsewhere = acquired.filter(d => d.session !== this.acquiredUnconfirmed[d.path]);
        const released = changedSessions.filter(d => typeof d.session !== 'string');
        const releasedByMyself = released.filter(d => {
            var _a;
            return ((_a = this.descriptors.find(prevD => prevD.path === d.path)) === null || _a === void 0 ? void 0 : _a.session) ===
                this.releaseUnconfirmed[d.path];
        });
        const releasedElsewhere = released.filter(d => {
            var _a;
            return ((_a = this.descriptors.find(prevD => prevD.path === d.path)) === null || _a === void 0 ? void 0 : _a.session) !==
                this.releaseUnconfirmed[d.path];
        });
        const didUpdate = connected.length + disconnected.length + changedSessions.length > 0;
        return {
            connected,
            disconnected,
            changedSessions,
            acquired,
            acquiredByMyself,
            acquiredElsewhere,
            released,
            releasedByMyself,
            releasedElsewhere,
            didUpdate,
            descriptors: nextDescriptors,
        };
    }
    handleDescriptorsChange(nextDescriptors) {
        var _a;
        if (this.stopped) {
            return;
        }
        const diff = this.getDiff(nextDescriptors);
        (_a = this.logger) === null || _a === void 0 ? void 0 : _a.debug('nextDescriptors', nextDescriptors, 'diff', diff);
        this.descriptors = nextDescriptors;
        if (!diff.didUpdate) {
            return;
        }
        Object.keys(this.listenPromise).forEach(path => {
            const descriptor = diff.descriptors.find(device => device.path === path);
            if (!descriptor) {
                return this.listenPromise[path].resolve(this.error({ error: ERRORS.DEVICE_DISCONNECTED_DURING_ACTION }));
            }
            const listenedPathChanged = diff.changedSessions.find(d => d.path === path);
            if (!listenedPathChanged) {
                return;
            }
            if (this.acquiredUnconfirmed[path]) {
                if (listenedPathChanged.session === this.acquiredUnconfirmed[path]) {
                    this.listenPromise[path].resolve(this.success(this.acquiredUnconfirmed[path]));
                }
                else {
                    this.listenPromise[path].resolve(this.error({ error: ERRORS.SESSION_WRONG_PREVIOUS }));
                }
                delete this.acquiredUnconfirmed[path];
            }
            if (this.releaseUnconfirmed[path]) {
                if (!listenedPathChanged.session) {
                    this.listenPromise[path].resolve(this.success(null));
                    delete this.releaseUnconfirmed[path];
                }
            }
        });
        this.emit(constants_1.TRANSPORT.UPDATE, diff);
    }
    getMessage(message = 'GetFeatures') {
        return !!this.messages.get(message);
    }
    updateMessages(messages) {
        this.messages = protobuf.Root.fromJSON(messages);
    }
    success(payload) {
        return (0, result_1.success)(payload);
    }
    error(payload) {
        return (0, result_1.error)(payload);
    }
}
exports.AbstractTransport = AbstractTransport;
//# sourceMappingURL=abstract.js.map